version: '3.8'

services:
    frontend: 
        image: aturyng/cryptagram-frontend:latest
        restart: unless-stopped
        build:
            context: .
            dockerfile: ./docker/frontend/dev/Dockerfile
        ports:
            - 80:80
            - 443:443
        volumes:
            - static_volume:/app/backend/static
            - ./docker/frontend/prod/nginx-conf:/etc/nginx/conf.d
            - ./docker/frontend/prod/certbot/conf:/etc/letsencrypt
            - ./docker/frontend/prod/certbot/www:/var/www/certbot
        deploy:
            placement:
                constraints: 
                  - "node.role==manager"
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        depends_on: 
            - backend
    certbot:
        image: certbot/certbot
        restart: unless-stopped
        volumes:
            - ./docker/frontend/prod/certbot/conf:/etc/letsencrypt
            - ./docker/frontend/prod/certbot/www:/var/www/certbot
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

    backend:
        image: aturyng/cryptagram-backend:latest
        restart: unless-stopped
        build:
            context: .
            dockerfile: ./docker/backend/prod/Dockerfile 
        command: gunicorn messenger_project.wsgi --bind 0.0.0.0:8000 #--workers 4 --threads 4
        expose:
            - 8000
        deploy:
            placement:
                constraints:
                  - "node.role==worker"
        env_file:
            - ./docker/backend/prod/.env
        depends_on:
            - db

    db:
        image: postgres:15.3
        volumes:
        - postgres_data:/var/lib/postgresql/data/
        env_file:
        - ./docker/db/prod/.env

volumes:
    static_volume:
    postgres_data:
